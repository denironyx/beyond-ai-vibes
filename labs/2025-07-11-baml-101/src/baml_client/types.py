# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
from enum import Enum


from pydantic import BaseModel, ConfigDict


import baml_py

CheckT = typing_extensions.TypeVar('CheckT')
CheckName = typing_extensions.TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str
class Checked(BaseModel, typing.Generic[CheckT, CheckName]):
    value: CheckT
    checks: typing.Dict[CheckName, Check]

def get_checks(checks: typing.Dict[CheckName, Check]) -> typing.List[Check]:
    return list(checks.values())

def all_succeeded(checks: typing.Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))
# #########################################################################
# Generated enums (2)
# #########################################################################

class SpamType(str, Enum):
    Spam = "Spam"
    NotSpam = "NotSpam"

class TicketLabel(str, Enum):
    ACCOUNT = "ACCOUNT"
    BILLING = "BILLING"
    GENERAL_QUERY = "GENERAL_QUERY"

# #########################################################################
# Generated classes (4)
# #########################################################################

class Email(BaseModel):
    subject: str
    body: str
    from_address: str

class OrderInfo(BaseModel):
    order_status: typing.Union[typing_extensions.Literal['ORDERED'], typing_extensions.Literal['SHIPPED'], typing_extensions.Literal['DELIVERED'], typing_extensions.Literal['CANCELLED']]
    tracking_number: typing.Optional[str] = None
    estimated_delivery_date: typing.Optional[str] = None

class Resume(BaseModel):
    name: str
    email: str
    experience: typing.List[str]
    skills: typing.List[str]

class TicketClassification(BaseModel):
    labels: typing.List[TicketLabel]

# #########################################################################
# Generated type aliases (0)
# #########################################################################
